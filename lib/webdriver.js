// Generated by CoffeeScript 1.3.3
(function() {
  var ASCII_SPECIAL_KEYS, Browser, Element, EventEmitter, MODIFIER_KEYS, MODIFIER_KEY_ARRAY, SPECIAL_KEYS, SPECIAL_KEY_ARRAY, Webdriver, convertCookie, elFuncFullType, elFuncSuffix, elementFuncTypes, fs, getAsciiVirtualKey, k, newError, newModifierKeys, querySelectorAllOrNull, querySelectorOrNull, rawText, rawType, transformRes, uuid, v, wait, waitAfterExecute, waitAfterPage, waitForConditionImpl, waitForConditionInBrowserJsScript, waitForOp, _fn, _i, _len, _searchType,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  EventEmitter = require("events").EventEmitter;

  Browser = require('zombie');

  require("./jsdom-patch");

  uuid = require('node-uuid');

  SPECIAL_KEYS = require("./special-keys");

  SPECIAL_KEY_ARRAY = (function() {
    var _results;
    _results = [];
    for (k in SPECIAL_KEYS) {
      v = SPECIAL_KEYS[k];
      _results.push(v);
    }
    return _results;
  })();

  MODIFIER_KEYS = {
    nullKey: '\uE000',
    shiftKey: '\uE008',
    ctrlKey: '\uE009',
    altKey: '\uE00A',
    metaKey: '\uE03D'
  };

  MODIFIER_KEY_ARRAY = (function() {
    var _results;
    _results = [];
    for (k in MODIFIER_KEYS) {
      v = MODIFIER_KEYS[k];
      _results.push(v);
    }
    return _results;
  })();

  ASCII_SPECIAL_KEYS = require("./ascii-special-keys");

  Element = require('./element').Element;

  wait = function(callback) {
    var args, _ref;
    args = [];
    if ((this.implicitWaiTimeout != null) && (this.implicitWaiTimeout > 0)) {
      args.push(this.implicitWaiTimeout);
    }
    args.push(callback);
    return (_ref = this.browser).wait.apply(_ref, args);
  };

  waitAfterPage = function(callback) {
    var args, _ref;
    args = [];
    if ((this.pageLoadTimeout != null) && (this.pageLoadTimeout > 0)) {
      args.push(this.pageLoadTimeout);
    }
    args.push(callback);
    return (_ref = this.browser).wait.apply(_ref, args);
  };

  waitAfterExecute = function(callback) {
    var args, _ref;
    args = [];
    if ((this.syncScriptTimeout != null) && (this.syncScriptTimeout > 0)) {
      args.push(this.syncScriptTimeout);
    }
    args.push(callback);
    return (_ref = this.browser).wait.apply(_ref, args);
  };

  waitForOp = function(performOpFunc, done) {
    var intervalId, limit,
      _this = this;
    if (!(performOpFunc())) {
      if (this.implicitWaiTimeout > 0) {
        limit = Date.now() + this.implicitWaiTimeout;
        return intervalId = setInterval(function() {
          if (performOpFunc()) {
            return clearInterval(intervalId);
          } else if (Date.now() > limit) {
            done(null, null);
            return clearInterval(intervalId);
          }
        }, this.pollMs);
      } else {
        return done(null, null);
      }
    }
  };

  newError = function(opts) {
    var err;
    err = new Error;
    for (k in opts) {
      v = opts[k];
      err[k] = v;
    }
    return err;
  };

  newModifierKeys = function() {
    return {
      reset: function() {
        this.ctrlKey = false;
        this.altKey = false;
        this.shiftKey = false;
        this.metaKey = false;
        return this;
      }
    };
  };

  Webdriver = (function(_super) {

    __extends(Webdriver, _super);

    function Webdriver() {
      this.browser = null;
    }

    return Webdriver;

  })(EventEmitter);

  Webdriver.prototype.init = function() {
    var args, desired, done, _i;
    args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), done = arguments[_i++];
    desired = args[0];
    this.browser = new Browser(desired);
    this.browser.setMaxListeners(100);
    this.modifierKeys = newModifierKeys().reset();
    this.implicitWaiTimeout = 0;
    this.syncScriptTimeout = 30000;
    this.asyncScriptTimeout = 0;
    this.pageLoadTimeout = 0;
    this.pollMs = 25;
    this.waitTimeout = 1000;
    return done(null, this.browser);
  };

  Webdriver.prototype.status = function(done) {
    return done(null, {
      status: 'OK'
    });
  };

  Webdriver.prototype.sessions = function(done) {
    return done(null, {
      '1': {
        browserName: 'zombie',
        headless: true,
        platform: 'ANY'
      }
    });
  };

  Webdriver.prototype.sessionCapabilities = function(done) {
    if ((this.browser != null)) {
      return done(null, {
        browserName: 'zombie',
        headless: true,
        platform: 'ANY'
      });
    } else {
      return done(newError({
        message: "No session."
      }));
    }
  };

  Webdriver.prototype.altSessionCapabilities = function(done) {
    if ((this.browser != null)) {
      return done(null, {
        browserName: 'zombie',
        headless: true,
        platform: 'ANY'
      });
    } else {
      return done(newError({
        message: "No session."
      }));
    }
  };

  Webdriver.prototype.get = function(url, done) {
    return this.browser.visit(url, done);
  };

  Webdriver.prototype.refresh = function(done) {
    return this.browser.reload(done);
  };

  Webdriver.prototype.back = function(done) {
    this.browser.window.history.back();
    return waitAfterPage.apply(this, [done]);
  };

  Webdriver.prototype.forward = function(done) {
    this.browser.window.history.forward();
    return waitAfterPage.apply(this, [done]);
  };

  Webdriver.prototype.url = function(done) {
    return done(null, this.browser.location.href);
  };

  Webdriver.prototype.quit = function(done) {
    var window, _i, _len, _ref;
    _ref = this.browser.windows.all();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      window = _ref[_i];
      this.browser.windows.close(window);
    }
    this.browser.close();
    this.browser = null;
    if (done != null) {
      return done(null);
    }
  };

  Webdriver.prototype.close = function(done) {
    this.browser.windows.close(this.browser.windows.current);
    if (done != null) {
      return done(null);
    }
  };

  Webdriver.prototype.setPageLoadTimeout = function(ms, done) {
    this.pageLoadTimeout = ms;
    return done(null);
  };

  Webdriver.prototype.setAsyncScriptTimeout = function(ms, done) {
    this.asyncScriptTimeout = ms;
    return done(null);
  };

  Webdriver.prototype.setImplicitWaitTimeout = function(ms, done) {
    this.implicitWaiTimeout = ms;
    return done(null);
  };

  Webdriver.prototype.setSyncScriptTimeout = function(ms, done) {
    this.syncScriptTimeout = ms;
    return done(null);
  };

  Webdriver.prototype.setWaitTimeout = Webdriver.prototype.setImplicitWaitTimeout;

  Webdriver.prototype["eval"] = function(code, done) {
    var res;
    res = null;
    try {
      res = this.browser.evaluate(code);
    } catch (err) {
      return done(newError({
        message: 'Evaluation failure.',
        cause: err,
        code: code
      }));
    }
    waitAfterExecute.apply(this, [function() {}]);
    return done(null, res);
  };

  Webdriver.prototype.safeEval = Webdriver.prototype["eval"];

  Webdriver.prototype.execute = function(code, args, done) {
    var res, script, _ref;
    if (!(done != null)) {
      _ref = [[], args], args = _ref[0], done = _ref[1];
    }
    script = "var ctx = " + (JSON.stringify({
      code: code,
      args: args
    })) + ";\nvar f = function () {\n  eval(ctx.code);\n};\nf.apply(this, ctx.args);  ";
    res = null;
    try {
      this.browser.evaluate(script);
    } catch (err) {
      return done(newError({
        message: 'Execution failure.',
        cause: err,
        code: code,
        args: args
      }));
    }
    waitAfterExecute.apply(this, [function() {}]);
    return done(null, res);
  };

  Webdriver.prototype.safeExecute = Webdriver.prototype.execute;

  Webdriver.prototype.executeAsync = function(code, args, done) {
    var execTimeout, key, response, returned, script, timedOut, timeout, _ref,
      _this = this;
    timeout = this.asyncScriptTimeout || 0;
    if (!(done != null)) {
      _ref = [[], args], args = _ref[0], done = _ref[1];
    }
    key = uuid.v4();
    script = "var ctx = " + (JSON.stringify({
      key: key,
      pollMs: this.pollMs,
      code: code,
      args: args
    })) + ";\nif(window.executeAsyncRes == null) {\n  window.executeAsyncRes = {};\n};\nwindow.executeAsyncRes[ctx.key] = {}\nvar callback = function ( res ) {\n  if(window.executeAsyncRes[ctx.key]!=null) {\n    window.executeAsyncRes[ctx.key].finished = true;\n    window.executeAsyncRes[ctx.key].res = res; \n  }\n};\nvar f = function () {\n  eval(ctx.code);    \n};  \nctx.args.push(callback);    \nf.apply(this, ctx.args);\n//triggers wait method more often\nwindow.executeAsyncRes[ctx.key].i = setInterval( function() {   \n}, ctx.pollMs);";
    execTimeout = null;
    timedOut = false;
    returned = false;
    try {
      this.browser.evaluate(script);
    } catch (err) {
      return done(newError({
        message: 'Execution failure.',
        cause: err,
        code: code,
        args: args
      }));
    }
    if (timeout > 0) {
      execTimeout = setTimeout(function() {
        return timedOut = true;
      }, timeout);
    }
    response = null;
    return this.browser.wait(function(window) {
      var finished;
      response = window.executeAsyncRes[key];
      finished = (response != null ? response.finished : void 0) || timedOut;
      if (finished) {
        window.clearInterval(window.executeAsyncRes[key].i);
        window.executeAsyncRes[key] = null;
      }
      return finished;
    }, function() {
      if (!returned) {
        if (execTimeout) {
          clearTimeout(execTimeout);
        }
        returned = true;
        if (response != null ? response.finished : void 0) {
          return done(null, response.res);
        } else if (timedOut) {
          return done(newError({
            status: 28,
            message: "Timed out: execAsync .",
            timeout: timeout,
            code: code,
            args: args
          }));
        } else {
          return done(newError({
            message: "execAsync error.",
            timeout: timeout,
            code: code,
            args: args
          }));
        }
      }
    });
  };

  Webdriver.prototype.safeExecuteAsync = Webdriver.prototype.executeAsync;

  querySelectorOrNull = function(sel, done) {
    var _this = this;
    return waitForOp.apply(this, [
      function() {
        var res;
        res = null;
        try {
          res = _this.browser.querySelector(sel);
        } catch (err) {
          done(err);
          return true;
        }
        if (res != null) {
          done(null, new Element(res, _this));
        }
        return res != null;
      }, done
    ]);
  };

  Webdriver.prototype.elementOrNull = function(searchType, value, done) {
    var _this = this;
    switch (searchType) {
      case "class name":
        return querySelectorOrNull.apply(this, ["." + value, done]);
      case "css selector":
        return querySelectorOrNull.apply(this, [value, done]);
      case "id":
        return querySelectorOrNull.apply(this, ["#" + value, done]);
      case "name":
        return querySelectorOrNull.apply(this, ["[name='" + value + "']", done]);
      case "link text":
      case "partial link text":
      case "tag name":
      case "xpath":
        return this.elements(searchType, value, function(err, res) {
          if (err != null) {
            done(err);
          }
          return done(null, ((res != null ? res.length : void 0) > 0 ? res[0] : null));
        });
      default:
        return done("Search type " + searchType + " not supported.");
    }
  };

  Webdriver.prototype.element = function(searchType, value, done) {
    return this.elementOrNull(searchType, value, function(err, res) {
      if (err != null) {
        return done(err);
      } else if (!(res != null)) {
        return done({
          status: 7
        });
      } else {
        return done(null, res);
      }
    });
  };

  Webdriver.prototype.elementIfExists = function(searchType, value, done) {
    return this.elementOrNull(searchType, value, function(err, res) {
      if (err != null) {
        return done(err);
      } else if (!(res != null)) {
        return done(null, void 0);
      } else {
        return done(null, res);
      }
    });
  };

  Webdriver.prototype.hasElement = function(searchType, value, done) {
    return this.elementOrNull(searchType, value, function(err, res) {
      if (err != null) {
        return done(err);
      } else {
        return done(null, res != null);
      }
    });
  };

  transformRes = function(rawRes) {
    var i, res;
    i = 0;
    res = [];
    while (rawRes[i] != null) {
      res.push(rawRes[i]);
      i++;
    }
    return res;
  };

  querySelectorAllOrNull = function(sel, done) {
    var _this = this;
    return waitForOp.apply(this, [
      function() {
        var rawRes, res, val;
        rawRes = null;
        try {
          rawRes = _this.browser.querySelectorAll(sel);
        } catch (err) {
          done(err);
          return true;
        }
        if (rawRes != null) {
          res = (function() {
            var _i, _len, _ref, _results;
            _ref = transformRes(rawRes);
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              val = _ref[_i];
              _results.push(new Element(val, this));
            }
            return _results;
          }).call(_this);
        }
        if ((res != null ? res.length : void 0) > 0) {
          done(null, res);
        }
        return (res != null ? res.length : void 0) > 0;
      }, done
    ]);
  };

  Webdriver.prototype.elements = function(searchType, value, done) {
    var _done,
      _this = this;
    _done = done;
    done = function(err, res) {
      if (res == null) {
        res = [];
      }
      return _done(err, res);
    };
    switch (searchType) {
      case "class name":
        return querySelectorAllOrNull.apply(this, ["." + value, done]);
      case "css selector":
        return querySelectorAllOrNull.apply(this, [value, done]);
      case "id":
        return querySelectorAllOrNull.apply(this, ["#" + value, done]);
      case "name":
        return querySelectorAllOrNull.apply(this, ["[name='" + value + "']", done]);
      case "link text":
        return waitForOp.apply(this, [
          function() {
            var rawRes, res, val;
            rawRes = null;
            try {
              rawRes = _this.browser.document.getElementsByTagName('a');
            } catch (err) {
              done(err);
              return true;
            }
            res = (function() {
              var _i, _len, _ref, _results;
              _ref = transformRes(rawRes);
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                val = _ref[_i];
                if (val.textContent === value) {
                  _results.push(new Element(val, this));
                }
              }
              return _results;
            }).call(_this);
            if ((res != null ? res.length : void 0) > 0) {
              done(null, res);
            }
            return (res != null ? res.length : void 0) > 0;
          }, done
        ]);
      case "partial link text":
        return waitForOp.apply(this, [
          function() {
            var rawRes, res, val;
            rawRes = null;
            try {
              rawRes = _this.browser.document.getElementsByTagName('a');
            } catch (err) {
              done(err);
              return true;
            }
            res = (function() {
              var _i, _len, _ref, _ref1, _results;
              _ref = transformRes(rawRes);
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                val = _ref[_i];
                if (((_ref1 = val.textContent) != null ? _ref1.indexOf(value) : void 0) >= 0) {
                  _results.push(new Element(val, this));
                }
              }
              return _results;
            }).call(_this);
            if ((res != null ? res.length : void 0) > 0) {
              done(null, res);
            }
            return (res != null ? res.length : void 0) > 0;
          }, done
        ]);
      case "tag name":
        return waitForOp.apply(this, [
          function() {
            var rawRes, res, val;
            rawRes = null;
            try {
              rawRes = _this.browser.document.getElementsByTagName(value);
            } catch (err) {
              done(err);
              return true;
            }
            res = (function() {
              var _i, _len, _ref, _results;
              _ref = transformRes(rawRes);
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                val = _ref[_i];
                _results.push(new Element(val, this));
              }
              return _results;
            }).call(_this);
            if ((res != null ? res.length : void 0) > 0) {
              done(null, res);
            }
            return (res != null ? res.length : void 0) > 0;
          }, done
        ]);
      case "xpath":
        return waitForOp.apply(this, [
          function() {
            var rawRes, res, val;
            rawRes = null;
            try {
              rawRes = _this.browser.xpath(value);
            } catch (err) {
              done(err);
              return true;
            }
            res = (function() {
              var _i, _len, _ref, _results;
              _ref = rawRes.value;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                val = _ref[_i];
                _results.push(new Element(val, this));
              }
              return _results;
            }).call(_this);
            if ((res != null ? res.length : void 0) > 0) {
              done(null, res);
            }
            return (res != null ? res.length : void 0) > 0;
          }, done
        ]);
      default:
        return done("Search type " + searchType + " not supported.");
    }
  };

  elFuncSuffix = function(type) {
    var res;
    res = (" by " + type).replace(/(\s[a-z])/g, function($1) {
      return $1.toUpperCase().replace(" ", "");
    });
    return res.replace("Xpath", "XPath");
  };

  elFuncFullType = function(searchType) {
    if (searchType === "css") {
      return "css selector";
    }
    return searchType;
  };

  elementFuncTypes = ["class name", "css selector", "id", "name", "link text", "partial link text", "tag name", "xpath", "css"];

  _fn = function() {
    var searchType;
    searchType = _searchType;
    Webdriver.prototype["element" + (elFuncSuffix(searchType))] = function(value, cb) {
      return this.element(elFuncFullType(searchType), value, cb);
    };
    Webdriver.prototype["element" + (elFuncSuffix(searchType)) + "OrNull"] = function(value, cb) {
      return this.elementOrNull(elFuncFullType(searchType), value, cb);
    };
    Webdriver.prototype["element" + (elFuncSuffix(searchType)) + "IfExists"] = function(value, cb) {
      return this.elementIfExists(elFuncFullType(searchType), value, cb);
    };
    Webdriver.prototype["hasElement" + (elFuncSuffix(searchType))] = function(value, cb) {
      return this.hasElement(elFuncFullType(searchType), value, cb);
    };
    return Webdriver.prototype["elements" + (elFuncSuffix(searchType))] = function(value, cb) {
      return this.elements(elFuncFullType(searchType), value, cb);
    };
  };
  for (_i = 0, _len = elementFuncTypes.length; _i < _len; _i++) {
    _searchType = elementFuncTypes[_i];
    _fn();
  }

  Webdriver.prototype.getAttribute = function(element, attrName, done) {
    var _this = this;
    if (element instanceof Element) {
      element = element.value;
    }
    return waitForOp.apply(this, [
      function() {
        var attrValue;
        attrValue = null;
        try {
          if (element.hasAttribute(attrName)) {
            attrValue = element.getAttribute(attrName);
          }
        } catch (err) {
          done(newError({
            message: "Cannot get attribute " + attrName + ".",
            element: element,
            attrName: attrName,
            cause: err
          }));
          return true;
        }
        if (attrValue != null) {
          done(null, attrValue);
        }
        return attrValue != null;
      }, done
    ]);
  };

  Webdriver.prototype.getValue = function(element, done) {
    var _this = this;
    if (element instanceof Element) {
      element = element.value;
    }
    return waitForOp.apply(this, [
      function() {
        var value;
        value = null;
        try {
          value = element.value;
        } catch (err) {
          done(newError({
            message: "Cannot get value.",
            element: element,
            cause: err
          }));
          return true;
        }
        if (value != null) {
          done(null, value);
        }
        return value != null;
      }, done
    ]);
  };

  rawText = function(element, done) {
    var _this = this;
    if (element instanceof Element) {
      element = element.value;
    }
    return waitForOp.apply(this, [
      function() {
        var value;
        value = null;
        try {
          value = element.textContent;
        } catch (err) {
          done(newError({
            message: "Cannot get text.",
            element: element,
            cause: err
          }));
          return true;
        }
        if (value != null) {
          done(null, value);
        }
        return value != null;
      }, done
    ]);
  };

  Webdriver.prototype.text = function(element, done) {
    if ((!(element != null)) || (element === 'body')) {
      return this.elementByTagName('body', function(err, rootEl) {
        if (err != null) {
          return done(err);
        }
        return rawText.apply(this, [rootEl, done]);
      });
    } else {
      return rawText.apply(this, [element, done]);
    }
  };

  Webdriver.prototype.textPresent = function(text, element, done) {
    return this.text(element, function(err, elText) {
      var res;
      if (err != null) {
        return done(err);
      }
      res = (elText != null ? elText.indexOf(text) : void 0) >= 0;
      return done(null, res);
    });
  };

  Webdriver.prototype.clickElement = function(element, done) {
    var _this = this;
    if (element instanceof Element) {
      element = element.value;
    }
    return this.browser.fire("click", element, function(err) {
      if ((err != null)) {
        return done(err);
      }
      _this.browser.document.active = element;
      return done(null);
    });
  };

  Webdriver.prototype.moveTo = function() {
    var args, done, element, _j,
      _this = this;
    element = arguments[0], args = 3 <= arguments.length ? __slice.call(arguments, 1, _j = arguments.length - 1) : (_j = 1, []), done = arguments[_j++];
    if (element instanceof Element) {
      element = element.value;
    }
    return this.browser.fire("mousemove", element, function(err) {
      var evObj;
      if ((err != null)) {
        return done(err);
      }
      evObj = _this.browser.document.createEvent('MouseEvents');
      evObj.initEvent('mouseover', true, false);
      element.dispatchEvent(evObj);
      _this.browser.document.active = element;
      return done(null);
    });
  };

  Webdriver.prototype.active = function(done) {
    var res;
    res = null;
    try {
      res = this.browser.document.active;
      if (res != null) {
        res = new Element(res, this);
      }
    } catch (err) {
      if ((err != null)) {
        return done(err);
      }
    }
    return done(null, res);
  };

  Webdriver.prototype.buttonDown = function(done) {
    var activeEl,
      _this = this;
    activeEl = this.browser.document.active;
    return this.browser.fire("mousedown", activeEl, function(err) {
      if ((err != null)) {
        return done(err);
      }
      return done(null);
    });
  };

  Webdriver.prototype.buttonUp = function(done) {
    var activeEl,
      _this = this;
    activeEl = this.browser.document.active;
    return this.browser.fire("mouseup", activeEl, function(err) {
      if ((err != null)) {
        return done(err);
      }
      return done(null);
    });
  };

  Webdriver.prototype.click = function() {
    var activeEl, args, button, done, evObj, _j;
    args = 2 <= arguments.length ? __slice.call(arguments, 0, _j = arguments.length - 1) : (_j = 0, []), done = arguments[_j++];
    button = args != null ? args[0] : void 0;
    if (button == null) {
      button = 0;
    }
    activeEl = this.browser.document.active;
    evObj = this.browser.document.createEvent('MouseEvents');
    evObj.initEvent('click', true, false);
    evObj.button = button;
    activeEl.dispatchEvent(evObj);
    evObj = this.browser.document.createEvent('MouseEvents');
    evObj.initEvent('mousedown', true, false);
    evObj.button = button;
    activeEl.dispatchEvent(evObj);
    evObj = this.browser.document.createEvent('MouseEvents');
    evObj.initEvent('mouseup', true, false);
    evObj.button = button;
    activeEl.dispatchEvent(evObj);
    return done(null);
  };

  Webdriver.prototype.doubleclick = function(done) {
    var activeEl, evObj;
    activeEl = this.browser.document.active;
    evObj = this.browser.document.createEvent('MouseEvents');
    evObj.initEvent('dblclick', true, false);
    activeEl.dispatchEvent(evObj);
    return done(null);
  };

  getAsciiVirtualKey = function(specialKey) {
    var virtualKeyName;
    virtualKeyName = null;
    for (k in SPECIAL_KEYS) {
      v = SPECIAL_KEYS[k];
      if (v === specialKey) {
        virtualKeyName = k;
      }
    }
    if (virtualKeyName != null) {
      return ASCII_SPECIAL_KEYS[virtualKeyName];
    } else {
      return null;
    }
  };

  rawType = function(element, texts, done) {
    var char, text, _fn1, _j, _k, _len1, _len2,
      _this = this;
    if (element instanceof Element) {
      element = element.value;
    }
    if (!(texts instanceof Array)) {
      texts = [texts];
    }
    for (_j = 0, _len1 = texts.length; _j < _len1; _j++) {
      text = texts[_j];
      _fn1 = function() {
        var charCode, eventType, modifKeyName, virtualKeyCode, _l, _len3, _ref, _results;
        charCode = null;
        virtualKeyCode = null;
        if ((__indexOf.call(MODIFIER_KEY_ARRAY, char) >= 0)) {
          modifKeyName = null;
          for (k in MODIFIER_KEYS) {
            v = MODIFIER_KEYS[k];
            if (v === char) {
              modifKeyName = k;
            }
          }
          if (modifKeyName === 'nullKey') {
            return _this.modifierKeys.reset();
          } else {
            return _this.modifierKeys[modifKeyName] = !_this.modifierKeys[modifKeyName];
          }
        } else {
          if ((__indexOf.call(SPECIAL_KEY_ARRAY, char) >= 0)) {
            virtualKeyCode = getAsciiVirtualKey(char);
          } else {
            charCode = char.charCodeAt();
          }
          _ref = ['keydown', 'keyup'];
          _results = [];
          for (_l = 0, _len3 = _ref.length; _l < _len3; _l++) {
            eventType = _ref[_l];
            _results.push((function() {
              var evObj;
              evObj = _this.browser.document.createEvent("UIEvents");
              evObj.initEvent(eventType, true, true);
              evObj.view = _this.browser.window;
              evObj.altKey = _this.modifierKeys.altKey;
              evObj.ctrlKey = _this.modifierKeys.ctrlKey;
              evObj.shiftKey = _this.modifierKeys.shiftKey;
              evObj.metaKey = _this.modifierKeys.metaKey;
              evObj.keyCode = virtualKeyCode;
              evObj.charCode = charCode;
              return element.dispatchEvent(evObj);
            })());
          }
          return _results;
        }
      };
      for (_k = 0, _len2 = text.length; _k < _len2; _k++) {
        char = text[_k];
        _fn1();
      }
    }
    return done(null);
  };

  Webdriver.prototype.type = function(element, texts, done) {
    var _this = this;
    if (element instanceof Element) {
      element = element.value;
    }
    if (!(texts instanceof Array)) {
      texts = [texts];
    }
    this.modifierKeys.reset();
    return rawType.apply(this, [
      element, texts, function(err) {
        if (err != null) {
          return done(err);
        }
        _this.modifierKeys.reset();
        return done(null);
      }
    ]);
  };

  Webdriver.prototype.keys = function(texts, done) {
    var element,
      _this = this;
    if (!(texts instanceof Array)) {
      texts = [texts];
    }
    element = this.browser.document.active;
    return rawType.apply(this, [
      element, texts, function(err) {
        if (err != null) {
          return done(err);
        }
        return done(null);
      }
    ]);
  };

  Webdriver.prototype.clear = function(element, done) {
    if (element instanceof Element) {
      element = element.value;
    }
    try {
      element.value = '';
    } catch (err) {
      if (err != null) {
        return done(err);
      }
    }
    return done(null);
  };

  Webdriver.prototype.title = function(done) {
    var title;
    title = null;
    try {
      title = this.browser.document.title;
    } catch (err) {
      if (err != null) {
        return done(err);
      }
    }
    return done(null, title);
  };

  Webdriver.prototype.dismissAlert = function(done) {
    return done(null);
  };

  Webdriver.prototype.acceptAlert = function(done) {
    return done(null);
  };

  Webdriver.prototype.deleteAllCookies = function(done) {
    try {
      this.browser.cookies().clear();
    } catch (err) {
      if (err != null) {
        return done(err);
      }
    }
    return done(null);
  };

  convertCookie = function(rawCookie) {
    var cookie, newKey;
    cookie = {};
    for (k in rawCookie) {
      v = rawCookie[k];
      if (!(v !== 'function')) {
        continue;
      }
      newKey = k === 'key' ? 'name' : k;
      cookie[newKey] = v;
    }
    return cookie;
  };

  Webdriver.prototype.allCookies = function(done) {
    var cookies, rawCookie, rawCookies;
    rawCookies = null;
    try {
      rawCookies = this.browser.cookies().all();
    } catch (err) {
      if (err != null) {
        return done(err);
      }
    }
    cookies = (function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = rawCookies.length; _j < _len1; _j++) {
        rawCookie = rawCookies[_j];
        _results.push(convertCookie(rawCookie));
      }
      return _results;
    })();
    return done(null, cookies);
  };

  Webdriver.prototype.setCookie = function(cookie, done) {
    var cookieArgs, extra, pathArgs, _ref, _ref1;
    pathArgs = [];
    pathArgs.push(cookie.domain);
    if (cookie.path != null) {
      pathArgs.push(cookie.path);
    }
    cookieArgs = [cookie.name, cookie.value];
    extra = {};
    for (k in cookie) {
      v = cookie[k];
      if (k !== 'domain' && k !== 'path' && k !== 'name' && k !== 'value') {
        extra[k] = v;
      }
    }
    if (((function() {
      var _results;
      _results = [];
      for (k in extra) {
        v = extra[k];
        _results.push(k);
      }
      return _results;
    })()).length !== 0) {
      cookieArgs.push(extra);
    }
    try {
      (_ref = (_ref1 = this.browser).cookies.apply(_ref1, pathArgs)).set.apply(_ref, cookieArgs);
    } catch (err) {
      if (err != null) {
        return done(err);
      }
    }
    return done(null);
  };

  Webdriver.prototype.deleteCookie = function(name, done) {
    try {
      this.browser.cookies().remove(name);
    } catch (err) {
      if (err != null) {
        return done(err);
      }
    }
    return done(null);
  };

  waitForConditionImpl = function(conditionExpr, limit, poll, cb) {
    var _this;
    _this = this;
    if (Date.now() < limit) {
      return this.safeEval(conditionExpr, function(err, res) {
        if (err != null) {
          return cb(err);
        }
        if (res === true) {
          return cb(null, true);
        } else {
          return setTimeout(function() {
            return waitForConditionImpl.apply(_this, [conditionExpr, limit, poll, cb]);
          }, poll);
        }
      });
    } else {
      return this.safeEval(conditionExpr, function(err, res) {
        if (err != null) {
          return cb(err);
        }
        if (res === true) {
          return cb(null, true);
        } else {
          return cb("waitForCondition failure for: " + conditionExpr);
        }
      });
    }
  };

  Webdriver.prototype.waitForCondition = function() {
    var args, cb, conditionExpr, limit, poll, timeout, _j;
    conditionExpr = arguments[0], args = 3 <= arguments.length ? __slice.call(arguments, 1, _j = arguments.length - 1) : (_j = 1, []), cb = arguments[_j++];
    timeout = args[0], poll = args[1];
    timeout = timeout || this.waitTimeout;
    poll = poll || this.pollMs;
    limit = Date.now() + timeout;
    return waitForConditionImpl.apply(this, [conditionExpr, limit, poll, cb]);
  };

  waitForConditionInBrowserJsScript = fs.readFileSync(__dirname + "/browser-scripts/wait-for-cond-in-browser.js", "utf8");

  Webdriver.prototype.waitForConditionInBrowser = function() {
    var args, cb, conditionExpr, poll, timeout, _j;
    conditionExpr = arguments[0], args = 3 <= arguments.length ? __slice.call(arguments, 1, _j = arguments.length - 1) : (_j = 1, []), cb = arguments[_j++];
    timeout = args[0], poll = args[1];
    timeout = timeout || this.pollMs;
    poll = poll || this.pollMs;
    return this.safeExecuteAsync(waitForConditionInBrowserJsScript, [conditionExpr, timeout, poll], function(err, res) {
      if (err != null) {
        return cb(err);
      }
      if (res !== true) {
        return cb("waitForConditionInBrowser failure for: " + conditionExpr);
      }
      return cb(null, res);
    });
  };

  Webdriver.prototype.zombieBrowser = function(done) {
    return done(null, this.browser);
  };

  module.exports = Webdriver;

}).call(this);
